name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  comprehensive-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install pytest-json-report pytest-cov pytest-timeout pytest-xdist

    - name: Run comprehensive test suite
      run: |
        python tests/automation/test_runner.py
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          comprehensive_test_report.json
          comprehensive_test_report.html
          coverage.json
          test_results_*.json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  performance-tests:
    runs-on: ubuntu-latest
    needs: comprehensive-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        python -m pytest tests/unit/test_performance_comprehensive.py -v --benchmark-only

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .benchmarks/

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  integration-tests:
    runs-on: ubuntu-latest
    needs: comprehensive-tests

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Wait for LocalStack
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        S3_ENDPOINT_URL: http://localhost:4566

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          .pytest_cache/
          *.log

  quality-gate:
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, performance-tests, security-scan, integration-tests]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Evaluate quality gate
      run: |
        echo "Evaluating quality gate criteria..."

        # Check if comprehensive tests passed
        if [ ! -f test-results-python-3.11/comprehensive_test_report.json ]; then
          echo "‚ùå Comprehensive test report not found"
          exit 1
        fi

        # Parse test results
        SUCCESS_RATE=$(cat test-results-python-3.11/comprehensive_test_report.json | python3 -c "
        import sys, json
        data = json.load(sys.stdin)
        print(data['summary']['success_rate'])
        ")

        COVERAGE=$(cat test-results-python-3.11/comprehensive_test_report.json | python3 -c "
        import sys, json
        data = json.load(sys.stdin)
        print(data['summary']['average_coverage'])
        ")

        echo "Success Rate: $(echo "$SUCCESS_RATE * 100" | bc -l)%"
        echo "Coverage: $COVERAGE%"

        # Quality gate criteria
        if (( $(echo "$SUCCESS_RATE < 0.95" | bc -l) )); then
          echo "‚ùå Success rate below 95%"
          exit 1
        fi

        if (( $(echo "$COVERAGE < 95.0" | bc -l) )); then
          echo "‚ùå Coverage below 95%"
          exit 1
        fi

        echo "‚úÖ Quality gate passed!"

    - name: Post quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          try {
            const report = JSON.parse(fs.readFileSync('test-results-python-3.11/comprehensive_test_report.json', 'utf8'));
            const summary = report.summary;

            const body = `
          ## üß™ Test Report

          | Metric | Value | Status |
          |--------|-------|--------|
          | Success Rate | ${(summary.success_rate * 100).toFixed(1)}% | ${summary.success_rate >= 0.95 ? '‚úÖ' : '‚ùå'} |
          | Coverage | ${summary.average_coverage.toFixed(1)}% | ${summary.average_coverage >= 95 ? '‚úÖ' : '‚ùå'} |
          | Total Tests | ${summary.total_tests} | ‚ÑπÔ∏è |
          | Passed | ${summary.passed} | ‚úÖ |
          | Failed | ${summary.failed} | ${summary.failed === 0 ? '‚úÖ' : '‚ùå'} |
          | Error Scenarios | ${summary.error_scenarios_tested} | ${summary.error_scenarios_tested >= 50 ? '‚úÖ' : '‚ö†Ô∏è'} |
          | Edge Cases | ${summary.edge_cases_tested} | ${summary.edge_cases_tested >= 30 ? '‚úÖ' : '‚ö†Ô∏è'} |

          ${report.recommendations.length > 0 ? `
          ## üìã Recommendations
          ${report.recommendations.map(rec => `- ${rec}`).join('\n')}
          ` : ''}

          > Generated by [Comprehensive Test Suite](${context.payload.repository.html_url}/actions/runs/${context.runId})
          `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } catch (error) {
            console.log('Could not post test report:', error);
          }
